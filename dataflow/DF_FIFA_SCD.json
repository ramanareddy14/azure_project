{
	"name": "DF_FIFA_SCD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_fifa_lake",
						"type": "DatasetReference"
					},
					"name": "newDatacsv"
				},
				{
					"dataset": {
						"referenceName": "ds_fifa_sql_table",
						"type": "DatasetReference"
					},
					"name": "existingdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_fifa_sql_table",
						"type": "DatasetReference"
					},
					"name": "sinkTOSQLDB"
				}
			],
			"transformations": [
				{
					"name": "CalNewHashVlaues"
				},
				{
					"name": "ExistingHashValues"
				},
				{
					"name": "checkForNewData"
				},
				{
					"name": "AddSurrogateKey"
				},
				{
					"name": "joinMaxSkey"
				},
				{
					"name": "CalculateExtraColumn",
					"description": "overwriting skey"
				},
				{
					"name": "releventColumns",
					"description": "selecting only required columns omitting some interim derived columns"
				},
				{
					"name": "exists1"
				},
				{
					"name": "updateExistingData"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "SelectReleventColumnUpdate"
				},
				{
					"name": "insertSSET"
				},
				{
					"name": "UpdateSet"
				},
				{
					"name": "UnionInsertAndUpdate"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter_ID as string ('ID'),",
				"     parameter_SCD as string ('Club,Wage,Position')",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> newDatacsv",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> existingdata",
				"newDatacsv derive(ID_Hash = md5(byName($parameter_ID)),",
				"          SCD_Hash = md5(byNames(split($parameter_SCD,',')))) ~> CalNewHashVlaues",
				"existingdata derive(id_hash = md5(byName($parameter_ID)),",
				"          SCD_hash = md5(byNames(split($parameter_SCD,',')))) ~> ExistingHashValues",
				"CalNewHashVlaues, ExistingHashValues exists(CalNewHashVlaues@ID_Hash == ExistingHashValues@id_hash",
				"     && CalNewHashVlaues@SCD_Hash == ExistingHashValues@SCD_hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> checkForNewData",
				"checkForNewData keyGenerate(output(SKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddSurrogateKey",
				"AddSurrogateKey, ExistingHashValues join(true()\r",
				"/* MaxSkey==SKey || true()  */,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxSkey",
				"joinMaxSkey derive(SKey = SKey+ iifNull(MaxSkey,0),",
				"          Active = 1,",
				"          ActiveStartTime = currentUTC(),",
				"          ActiveEndTime = toTimestamp(toString(null()))) ~> CalculateExtraColumn",
				"CalculateExtraColumn select(mapColumn(",
				"          each(match(name!='ID_Hash'&&name!='SCD_Hash'&&name!='MaxSkey'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> releventColumns",
				"ExistingHashValues exists(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"ExistingHashValues, checkForNewData exists(ExistingHashValues@id_hash == CalNewHashVlaues@ID_Hash,",
				"     negate:false,",
				"     broadcast: 'auto')~> updateExistingData",
				"updateExistingData derive(Active = 0,",
				"          ActiveEndTIme = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          each(match(!in(['ID_Hash','SCD_Hash'],name)))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReleventColumnUpdate",
				"releventColumns alterRow(insertIf(true())) ~> insertSSET",
				"SelectReleventColumnUpdate alterRow(updateIf(true())) ~> UpdateSet",
				"insertSSET, UpdateSet union(byName: true)~> UnionInsertAndUpdate",
				"UnionInsertAndUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:[($parameter_ID)],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkTOSQLDB"
			]
		}
	}
}